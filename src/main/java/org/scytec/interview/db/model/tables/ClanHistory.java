/*
 * This file is generated by jOOQ.
 */
package org.scytec.interview.db.model.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.scytec.interview.db.model.Keys;
import org.scytec.interview.db.model.Public;
import org.scytec.interview.db.model.tables.records.ClanHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClanHistory extends TableImpl<ClanHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.CLAN_HISTORY</code>
     */
    public static final ClanHistory CLAN_HISTORY = new ClanHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClanHistoryRecord> getRecordType() {
        return ClanHistoryRecord.class;
    }

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.ID</code>.
     */
    public final TableField<ClanHistoryRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.DATE_TIME</code>.
     */
    public final TableField<ClanHistoryRecord, LocalDateTime> DATE_TIME = createField(DSL.name("DATE_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.ACTION</code>.
     */
    public final TableField<ClanHistoryRecord, String> ACTION = createField(DSL.name("ACTION"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.CLAN_ID</code>.
     */
    public final TableField<ClanHistoryRecord, Long> CLAN_ID = createField(DSL.name("CLAN_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.USER_ID</code>.
     */
    public final TableField<ClanHistoryRecord, Long> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.TASK_ID</code>.
     */
    public final TableField<ClanHistoryRecord, Long> TASK_ID = createField(DSL.name("TASK_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.GOLD_FROM</code>.
     */
    public final TableField<ClanHistoryRecord, Integer> GOLD_FROM = createField(DSL.name("GOLD_FROM"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.CLAN_HISTORY.GOLD_TO</code>.
     */
    public final TableField<ClanHistoryRecord, Integer> GOLD_TO = createField(DSL.name("GOLD_TO"), SQLDataType.INTEGER, this, "");

    private ClanHistory(Name alias, Table<ClanHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClanHistory(Name alias, Table<ClanHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.CLAN_HISTORY</code> table reference
     */
    public ClanHistory(String alias) {
        this(DSL.name(alias), CLAN_HISTORY);
    }

    /**
     * Create an aliased <code>PUBLIC.CLAN_HISTORY</code> table reference
     */
    public ClanHistory(Name alias) {
        this(alias, CLAN_HISTORY);
    }

    /**
     * Create a <code>PUBLIC.CLAN_HISTORY</code> table reference
     */
    public ClanHistory() {
        this(DSL.name("CLAN_HISTORY"), null);
    }

    public <O extends Record> ClanHistory(Table<O> child, ForeignKey<O, ClanHistoryRecord> key) {
        super(child, key, CLAN_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ClanHistoryRecord, Long> getIdentity() {
        return (Identity<ClanHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClanHistoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    @Override
    public ClanHistory as(String alias) {
        return new ClanHistory(DSL.name(alias), this);
    }

    @Override
    public ClanHistory as(Name alias) {
        return new ClanHistory(alias, this);
    }

    @Override
    public ClanHistory as(Table<?> alias) {
        return new ClanHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClanHistory rename(String name) {
        return new ClanHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClanHistory rename(Name name) {
        return new ClanHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClanHistory rename(Table<?> name) {
        return new ClanHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDateTime, String, Long, Long, Long, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super LocalDateTime, ? super String, ? super Long, ? super Long, ? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super LocalDateTime, ? super String, ? super Long, ? super Long, ? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
